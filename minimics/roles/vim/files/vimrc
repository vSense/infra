""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Global
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Leader Key
let mapleader = " "
set nocompatible               " be iMproved

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vundle Config
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""" Vundle plugin manager {{{
""" Automatically setting up Vundle, taken from
""" http://www.erikzaadi.com/2012/03/19/auto-installing-vundle-from-your-vimrc
let has_vundle=1
if !filereadable($HOME."/.vim/bundle/Vundle.vim/README.md")
    echo "Installing Vundle..."
    echo ""
    silent !mkdir -p $HOME/.vim/bundle
    silent !git clone https://github.com/gmarik/Vundle.vim $HOME/.vim/bundle/Vundle.vim
    let has_vundle=0
endif

""" Initialize Vundle
filetype off                                " required to init
set rtp+=$HOME/.vim/bundle/Vundle.vim       " include vundle
call vundle#begin()                         " init vundle

Plugin 'gmarik/Vundle.vim'

" Add you own bundles here
" Plugin 'username/bundlename'
Plugin 'bling/vim-airline'
Plugin 'nanotech/jellybeans.vim'
Plugin 'tomasr/molokai'
Plugin 'chriskempson/base16-vim'
Plugin 'tpope/vim-fugitive'
Plugin 'altercation/vim-colors-solarized'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/syntastic'
Plugin 'jistr/vim-nerdtree-tabs'

call vundle#end()

" Re-enable fletype plugin indent
filetype plugin indent on
augroup FileTypeRules
    autocmd!
    autocmd BufNewFile,BufRead *.md set ft=markdown
    autocmd BufNewFile,BufRead *.tex set ft=tex
    autocmd BufNewFile,BufRead *.txt set ft=sh
augroup END
""" Installing plugins the first time, quits when done {{{
if has_vundle == 0
    :silent! PluginInstall
    :qa
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Colors, terminal & Visual
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
syn on
if (&term =~ "xterm") || (&term =~ "screen")
    set t_Co=256
endif
" set t_Co=256 " Explicitly tell Vim that the terminal supports 256 colors
let base16colorspace=256 " Access colors present in 256 colorspace
" set t_ut= " Redraw background correctly
set encoding=utf-8
set fileencodings=utf-8,latin2

" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Highlight EOL whitespace, http://vim.wikia.com/wiki/Highlight_unwanted_spaces
highlight ExtraWhitespace   ctermbg=darkred guibg=#382424
highlight ErrorMsg         ctermbg=darkred guibg=#382424
match ErrorMsg '\%>80v.\+'

autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
autocmd ColorScheme * highlight ErrorMsg        ctermbg=red guibg=red
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/

" Airline bar
let g:airline#extensions#tabline#enabled = 1

" Use Powerline Symbols if your fonts are patched
let g:airline_powerline_fonts = 1

" Colorscheme
set background=dark

"" Uncomment if you have no taste or no time to spend on your color
"" configuration. (No Solarized, no base16)
" let g:airline_theme='jellybeans'
" colorscheme jellybeans

"" Uncomment if you have a solarized terminal
"" (eg: solarized for putty, gnome terminal solarized colors...)
"let g:airline_theme='powerlineish'
let g:airline_theme='solarized'

"" Uncomment if you want to use your BASE16 theme
" let g:airline_theme='base16'
" colorscheme base16-default
colorscheme solarized

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Text, columns, tab and indent related
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4

" Linebreak on 80 characters
" set lbr
" set tw=79
set ai "Auto indent
set si "Smart indent
"set wrap "Wrap lines
set colorcolumn=81
set showmatch
set incsearch
set ignorecase
set backspace=2

" Run :FixWhitespace to remove end of line white space.
function! s:FixWhitespace(line1,line2)
    let l:save_cursor = getpos(".")
    silent! execute ':' . a:line1 . ',' . a:line2 . 's/\s\+$//'
    call setpos('.', l:save_cursor)
endfunction
command! -range=% FixWhitespace call <SID>FixWhitespace(<line1>,<line2>)

" Set 7 lines to the cursor - when moving vertically using j/k
set so=7

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Layout, Buffers
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Format the status line
" set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l

set number                          " Show line number
set laststatus=2                    " Always show the statusline
set cmdheight=1                     " Height of the command bar

" Turn on the WiLd menu with zsh-like autocompletion
set wildmenu
" set wildmode=longest:full
set wildignore=*.o,*~,*.pyc

set ruler " Always show current position

set hidden " A buffer becomes hidden when it is abandoned

" Configure backspace so it acts as it should act
set backspace=indent,eol,start
set whichwrap+=<,>,h,l

" Return to last edit position when opening files (You want this!)
autocmd BufReadPost *
            \ if line("'\"") > 0 && line("'\"") <= line("$") |
            \   exe "normal! g`\"" |
            \ endif
" Remember info about open buffers on close
set viminfo^=%

" Specify the behavior when switching between buffers
try
    set switchbuf=useopen,usetab,newtab
    set stal=2
catch
endtry

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Search
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set ignorecase
set smartcase
set hlsearch
set incsearch

" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f')<CR>
vnoremap <silent> # :call VisualSelection('b')<CR>

" Don't redraw while executing macros (good performance config)
set lazyredraw

" For regular expressions turn magic on
set magic

" Use Unix as the standard file type
set ffs=unix,dos,mac

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Files, backups and saves
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nobackup
set nowb
set noswapfile

" Delete trailing whitespaces
func! DeleteTrailingWS()
    exe "normal mz"
    %s/\s\+$//ge
    exe "normal `z"
endfunc

" You can delete trailing whitespaces each time you save a document
" Python
" autocmd BufWrite *.py :call DeleteTrailingWS()

" CoffeeScript
" autocmd BufWrite *.coffee :call DeleteTrailingWS()

" SH
" autocmd BufWrite *.sh :call DeleteTrailingWS()

" All files
autocmd BufWrite * :call DeleteTrailingWS()

" Type :SudoW to save a file with sudo privileges
command! -bar -nargs=0 SudoW   :silent exe "write !sudo tee % >/dev/null"|silent edit!

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Key mapping and remapping
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Move on a line between words
map <C-h> b
map <C-l> w
map <C-q> ^
map <C-e> $

" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
map <space> /
map <c-space> ?

" Smart way to move between windows
map <leader>wj <C-w>j
map <leader>wk <C-w>k
map <leader>wh <C-w>h
map <leader>wl <C-w>l
map <C-h> <C-w>h
map <C-l> <C-w>l

" Close the current buffer
map <leader>bc :Bclose<cr>
map <leader>bd :Bclose<cr>

" Useful mappings for managing tabs
map <leader>tn :enew<cr>
" map <leader>to :tabonly<cr>
map <leader>tc :Bclose<cr>
map <leader>th :bprevious<cr>
map <leader>tl :bnext<cr>

" Useful mappings for managing windows
map <leader>wn :vsplit<cr>
map <leader>wb :split<cr>
map <leader>wc :close<cr>

" Rotate buffers
map <F2> :bprevious<cr>
map <leader>bp :bprevious<cr>
map <F3> :bnext<cr>
map <leader>bn :bnext<cr>

" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Remap VIM 0 to first non-blank character
map 0 ^

nnoremap <C-j> :m .+1<CR>==
nnoremap <C-k> :m .-2<CR>==
inoremap <C-j> <Esc>:m .+1<CR>==gi
inoremap <C-k> <Esc>:m .-2<CR>==gi
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv

" VIM GREP
" When you press gv you vimgrep after the selected text
vnoremap <silent> gv :call VisualSelection('gv')<CR>

" Open vimgrep and put the cursor in the right position
map <leader>g :vimgrep // **/*.<left><left><left><left><left><left><left>

" Vimgreps in the current file
map <leader><space> :vimgrep // <C-R>%<C-A><left><left><left><left><left><left><left><left>

" When you press <leader>r you can search and replace the selected text
vnoremap <silent> <leader>r :call VisualSelection('replace')<CR>

map <leader>cc :botright cope<cr>
map <leader>co ggVGy:tabnew<cr>:set syntax=qf<cr>pgg
map <leader>n :cn<cr>
map <leader>p :cp<cr>

" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

" Quickly open a buffer for scripbble
map <leader>q :e ~/buffer<cr>

" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>
map <F4> :setlocal paste!<cr>

" Toggle highlight search
map <leader>hs :set hlsearch!<cr>

" NERDtree
map <Leader>n <plug>NERDTreeTabsToggle<CR>
map <F5>      <plug>NERDTreeSteppedOpen<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction

function! VisualSelection(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    en
    return ''
endfunction

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
    let l:currentBufNum = bufnr("%")
    let l:alternateBufNum = bufnr("#")

    if buflisted(l:alternateBufNum)
        buffer #
    else
        bnext
    endif

    if bufnr("%") == l:currentBufNum
        new
    endif

    if buflisted(l:currentBufNum)
        execute("bdelete! ".l:currentBufNum)
    endif
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PLUGINS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" NERDTree specific
"let g:nerdtree_tabs_autofind=1
"let g:nerdtree_tabs_open_on_console_startup=1 " Launch at start
"let g:nerdtree_tabs_no_startup_for_diff=1
let g:NERDTreeWinPos = "right"

